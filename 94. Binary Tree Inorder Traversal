# [94. Binary Tree Inorder Traversal](https://leetcode.com/problems/binary-tree-inorder-traversal/)

## 题目
Given the root of a binary tree, return the inorder traversal of its nodes' values.
![](https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg)
```
Input: root = [1,null,2,3]
Output: [1,3,2]
```

## 题目大意
对二叉树进行中序遍历

## 代码
中序遍历 左-根-右

```cpp
// LeetCode, Binary Tree Inorder Traversal
// 时间复杂度 O(n)空间复杂度 O(n)
class Solution {
public:
vector<int> inorderTraversal(TreeNode *root) {
vector<int> result;
stack<const TreeNode *> s;
const TreeNode *p = root;

while (!s.empty() || p != nullptr) {
	if (p != nullptr) {
		s.push(p);
		p = p->left;
	} 
	else {
		p = s.top();
		s.pop();
		result.push_back(p->val);
		p = p->right;
	}
}
return result;
}
};
```
感想
所以其实上我们真正**进行操作的永远都是根节点** 不可能是抽像的左子树或是右子树

因此我们要找的就是第一个没有左子树的根节点 然后进行 右 之后从下往上进行先前进行操作的根节点就相当于是没有了左子树的根结点再进行操作
